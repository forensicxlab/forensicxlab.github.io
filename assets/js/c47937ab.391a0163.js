"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[4141],{5537:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(6540),i=n(4164),a=n(5627),s=n(6347),l=n(372),o=n(604),d=n(1861),u=n(8749);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const i=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=x(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[d,c]=p({queryString:n,groupId:i}),[b,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,u.Dv)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),f=(()=>{const e=d??b;return h({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),m(e)}),[c,m,a]),tabValues:a}}var m=n(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function j(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),u=e=>{const t=e.currentTarget,n=o.indexOf(t),i=l[n].value;i!==r&&(d(t),s(i))},c=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{o.push(e)},onKeyDown:c,onClick:u,...a,className:(0,i.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function y(e){const t=b(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,g.jsx)(j,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function w(e){const t=(0,m.A)();return(0,g.jsx)(y,{...e,children:c(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}},9329:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);var r=n(4164);const i={tabItem:"tabItem_Ymn6"};var a=n(4848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:n,children:t})}},9536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"exhume_partitions/getting-started","title":"Getting Started","description":"Learn the basic principles of exhuming partitions from a disk image.","source":"@site/docs/exhume_partitions/getting-started.md","sourceDirName":"exhume_partitions","slug":"/exhume_partitions/getting-started","permalink":"/docs/exhume_partitions/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\uddec Exhume - Partitions","permalink":"/docs/category/-exhume---partitions"},"next":{"title":"Exhume Partitions as a library","permalink":"/docs/exhume_partitions/library"}}');var i=n(4848),a=n(8453),s=n(5537),l=n(9329);const o={sidebar_position:1},d="Getting Started",u={},c=[{value:"\ud83d\udee0\ufe0f Prerequisites",id:"\ufe0f-prerequisites",level:2},{value:"Installing Rust",id:"installing-rust",level:3},{value:"Installing",id:"installing",level:3},{value:"Contributing",id:"contributing",level:3},{value:"\ud83d\ude80 Basic Usage",id:"-basic-usage",level:2},{value:"\ud83d\udcd8 Example",id:"-example",level:3}];function x(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(t.p,{children:"Learn the basic principles of exhuming partitions from a disk image."}),"\n",(0,i.jsx)(t.p,{children:"The exhume_partitions tool helps you identify and list the partitions within a disk image. This is a crucial step in digital forensics when you need to understand the structure of the disk before diving into filesystem analysis. The tool support MBR and GPT parsing allowing."}),"\n",(0,i.jsx)(t.h2,{id:"\ufe0f-prerequisites",children:"\ud83d\udee0\ufe0f Prerequisites"}),"\n",(0,i.jsx)(t.h3,{id:"installing-rust",children:"Installing Rust"}),"\n",(0,i.jsx)(t.p,{children:"The Exhume Toolkit is built with Rust and requires it for development or compilation."}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(l.A,{value:"Unix",label:"Linux and MacOs",default:!0,children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n"})})}),(0,i.jsxs)(l.A,{value:"Microsoft",label:"Windows",children:[(0,i.jsxs)(t.p,{children:["Visit ",(0,i.jsx)(t.a,{href:"https://www.rust-lang.org/tools/install",children:"https://www.rust-lang.org/tools/install"})," to install ",(0,i.jsx)(t.code,{children:"rustup"}),"\nYou can also use winget to install rustup using the following command in PowerShell:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-powershell",children:"winget install --id Rustlang.Rustup\n"})}),(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"Be sure to restart your Terminal (and in some cases your system) for the changes to take affect."})})})})]})]}),"\n",(0,i.jsx)(t.h3,{id:"installing",children:"Installing"}),"\n",(0,i.jsx)(t.p,{children:"The following will install Exhume partitions globally."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cargo install exhume_partitions@0.2.2\n"})}),"\n",(0,i.jsx)(t.h3,{id:"contributing",children:"Contributing"}),"\n",(0,i.jsx)(t.p,{children:"Clone the ehxume_partitions repository and build it."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/forensicxlab/exhume_partitions\ncd exhume_partitions\n"})}),"\n",(0,i.jsx)(t.p,{children:"Start enhancing the tool."}),"\n",(0,i.jsx)(t.h2,{id:"-basic-usage",children:"\ud83d\ude80 Basic Usage"}),"\n",(0,i.jsx)(t.p,{children:"Required Flags:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-b"}),", ",(0,i.jsx)(t.code,{children:"--body"})," ",(0,i.jsx)(t.code,{children:"<FILE>"}),": Path to the disk image or body."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Optional Flags:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-l"}),", ",(0,i.jsx)(t.code,{children:"--log-level"})," ",(0,i.jsx)(t.code,{children:"<LEVEL>"}),": Logging level (error, warn, info, debug, trace). Default is info."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-f"}),", ",(0,i.jsx)(t.code,{children:"--format"})," ",(0,i.jsx)(t.code,{children:"<FORMAT>"}),": Format of the image (raw or ewf)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-j"}),", ",(0,i.jsx)(t.code,{children:"--json"}),": Display the partitions in JSON format."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-o"}),", ",(0,i.jsx)(t.code,{children:"--output"})," ",(0,i.jsx)(t.code,{children:"<OUTPUT_PATH>"}),": Specify the output file to save partition info."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"exhume_partitions -b <path_to_image> -f <format> [-j] [-o <output_file>]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"-example",children:"\ud83d\udcd8 Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"exhume_partitions -b disk.E01\n"})}),"\n",(0,i.jsx)(t.p,{children:"This will:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Open disk.E01 as a EWF format file"}),"\n",(0,i.jsx)(t.li,{children:"Identify the partitions and display them."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Sample output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'[2025-04-14T09:37:25Z INFO  exhume_body] Detected an EWF disk image.\n[2025-04-14T09:37:25Z INFO  exhume_partitions] Detected an MBR partition scheme.\n[2025-04-14T09:37:25Z INFO  exhume_partitions] Extended partition discovered.\n[2025-04-14T09:37:25Z WARN  exhume_partitions] No GPT signature found\n+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Bootloader               | 0x1000: jmp 0x1065                                                                                                                                        |\n|                          | 0x1002: nop                                                                                                                                               |\n|                          | 0x1003: adc byte ptr [bp - 0x4330], cl                                                                                                                    |\n|                          | 0x1007: add byte ptr [bx + si + 0xb8], dh                                                                                                                 |\n|                          | 0x100b: add byte ptr [bp - 0x7128], cl                                                                                                                    |\n|                          | 0x100f: sar bl, 0xbe                                                                                                                                      |\n|                          | 0x1012: add byte ptr [si - 0x41], bh                                                                                                                      |\n|                          | 0x1015: add byte ptr [0xb9], al                                                                                                                           |\n|                          | 0x1019: add dh, bl                                                                                                                                        |\n|                          | 0x101b: movsb byte ptr es:[di], byte ptr [si]                                                                                                             |\n|                          | 0x101c: ljmp 0:0x621                                                                                                                                      |\n|                          | 0x1021: mov si, 0x7be                                                                                                                                     |\n|                          | 0x1024: cmp byte ptr [si], al                                                                                                                             |\n|                          | 0x1026: jne 0x1033                                                                                                                                        |\n|                          | 0x1028: add si, 0x10                                                                                                                                      |\n|                          | 0x102b: cmp si, 0x7fe                                                                                                                                     |\n|                          | 0x102f: jne 0x1024                                                                                                                                        |\n|                          | 0x1031: jmp 0x1049                                                                                                                                        |\n|                          | 0x1033: mov ah, 2                                                                                                                                         |\n|                          | 0x1035: mov al, 1                                                                                                                                         |\n|                          | 0x1037: mov bx, 0x7c00                                                                                                                                    |\n|                          | 0x103a: mov dl, 0x80                                                                                                                                      |\n|                          | 0x103c: mov dh, byte ptr [si + 1]                                                                                                                         |\n|                          | 0x103f: mov cx, word ptr [si + 2]                                                                                                                         |\n|                          | 0x1042: int 0x13                                                                                                                                          |\n|                          | 0x1044: ljmp 0:0x7c00                                                                                                                                     |\n|                          | 0x1049: jmp 0x1049                                                                                                                                        |\n|                          | 0x104b: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x104d: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x104f: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1051: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1053: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1055: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1057: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1059: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x105b: add byte ptr [bx + di], 0                                                                                                                         |\n|                          | 0x105e: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1060: add byte ptr [bx + si], al                                                                                                                        |\n|                          | 0x1062: add byte ptr [bx + si], al                                                                                                                        |\n+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Partition tables entries | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n|                          | | Bootable | Start address (CHS) | End address (CHS) | Start address (LBA) | Partition type | Type Description | First byte address | Size (in sectors) | |\n|                          | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n|                          | | 128      | (0, 32, 33)         | (1023, 254, 63)   | 0x800               | 0x83           | "Linux/GNU Hurd" | 0x100000           | 0x9c00000         | |\n|                          | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n|                          | | 0        | (1023, 254, 63)     | (1023, 254, 63)   | 0x9c00ffe           | 0x05           | "Extended"       | 0x13801ffc00       | 0x3fe802          | |\n|                          | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n|                          | | 0        | (0, 0, 0)           | (0, 0, 0)         | 0x0                 | 0x00           | "Unused"         | 0x0                | 0x0               | |\n|                          | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n|                          | | 0        | (0, 0, 0)           | (0, 0, 0)         | 0x0                 | 0x00           | "Unused"         | 0x0                | 0x0               | |\n|                          | +----------+---------------------+-------------------+---------------------+----------------+------------------+--------------------+-------------------+ |\n+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+\n| MBR Signature            | 0xaa55                                                                                                                                                    |\n+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n+------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n| Extented Boot Record Entries | +----------+-----------------+-----------------+-------------+------+--------------+-----------------+----------------+ |\n|                              | | Bootable | Start (CHS)     | End (CHS)       | Start (LBA) | Type | Description  | First Byte Addr | Size (sectors) | |\n|                              | +----------+-----------------+-----------------+-------------+------+--------------+-----------------+----------------+ |\n|                              | | 0x00     | (1023, 254, 63) | (1023, 254, 63) | 0x9C01000   | 0x82 | "Linux Swap" | 0x1380200000    | 0x3FE800       | |\n|                              | +----------+-----------------+-----------------+-------------+------+--------------+-----------------+----------------+ |\n+------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);