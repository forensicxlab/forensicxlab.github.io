"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[5250],{37:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>h});var s=i(224),n=i(4848),o=i(8453);const a={slug:"thanatology-3",title:"\ud83e\udd89 Thanatology part 3: MBR and GPT forensics with the Exhume ToolKit.",authors:["k1nd0ne"],tags:["Thanatology","Exhume","Digital Forensics"]},r=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Discovering a Disk Image Layout",id:"discovering-a-disk-image-layout",level:2},{value:"Metric used in this series",id:"metric-used-in-this-series",level:3},{value:"The Master Boot Record (MBR)",id:"the-master-boot-record-mbr",level:2},{value:"Partition entries in MBR",id:"partition-entries-in-mbr",level:3},{value:"EBR: The \u201cugly\u201d fix for the partition entries limitation",id:"ebr-the-ugly-fix-for-the-partition-entries-limitation",level:2},{value:"GUID Partition Table (GPT): The modern layout",id:"guid-partition-table-gpt-the-modern-layout",level:2},{value:"Protective MBR",id:"protective-mbr",level:3},{value:"The GPT Header",id:"the-gpt-header",level:3},{value:"The GPT Partition entries",id:"the-gpt-partition-entries",level:3},{value:"Exhume Partitions: Disk Layout Investigation",id:"exhume-partitions-disk-layout-investigation",level:2},{value:"JSON output",id:"json-output",level:3},{value:"Using as a library",id:"using-as-a-library",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"This blogpost is part of the Thanatology blogpost series. If you haven\u2019t check it out, I recommend reading the following first:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/blog/thanatology",children:"Thanatology part 1: Introduction to the Thanatology project"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/blog/thanatology-2",children:"Thanatology part 2: Multiple disk images formats handling using the Exhume ToolKit"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In this blogpost, we will dive into the concepts of GPT and MBR partition schemes and explore them using ",(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/docs/category/-exhume---partitions",children:"Exhume Partitions"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"discovering-a-disk-image-layout",children:"Discovering a Disk Image Layout"}),"\n",(0,n.jsxs)(t.p,{children:["In the last blogpost we presented how ",(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/docs/category/-exhume---body",children:"Exhume Body"})," is providing us with an easy way of reading sectors on multiple disk image formats. Now that we have this module, the next step when performing the digital forensic analysis of a disk image is to discover its layout."]}),"\n",(0,n.jsx)(t.p,{children:"In order for any computer to load an operating system when powering it up, the processor must locate and execute bootstrapping code stored in a well-defined location on the disk. This code is typically found in the Master Boot Record (MBR) for legacy BIOS systems or the GUID Partition Table (GPT) for modern UEFI-based systems."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(8042).A+"",width:"3015",height:"1357"})}),"\n",(0,n.jsx)(t.p,{children:"These structures define how the disk is divided into partitions. Partitions are simply set of logical segments that can each contain a filesystem. Proper partition analysis helps forensic investigators understand how the disk was used, identify hidden or suspicious partitions, and extract meaningful artifacts. It also provides context, such as whether the disk uses a standard layout or one that suggests tampering or obfuscation."}),"\n",(0,n.jsx)(t.p,{children:"Understanding the partitioning scheme is critical as an investigator, as it determines how data structures are interpreted in subsequent analysis phases. Once the partition layout is identified, each partition can be parsed individually for deeper inspection of its filesystem contents. In the later blogposts of this series we will dive into a lot of filesystems like extfs, NTFS, exFAT, and more!"}),"\n",(0,n.jsx)(t.h3,{id:"metric-used-in-this-series",children:"Metric used in this series"}),"\n",(0,n.jsx)(t.p,{children:"A bit of vocabulary so we are on the same page. In this blogpost and all of the others of this series:"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.strong,{children:"sector"})," is the smallest addressable unit of data on a disk or other block storage device. Usually, a sector is ",(0,n.jsx)(t.strong,{children:"512 bytes in size"}),", though modern devices may use 4,096-byte (or 4K) sectors for improved efficiency. ",(0,n.jsx)(t.strong,{children:"Unless specified, we will always use a 512 bytes size when mentioning sector size"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"the-master-boot-record-mbr",children:"The Master Boot Record (MBR)"}),"\n",(0,n.jsxs)(t.p,{children:["The Master Boot Record (MBR) is a special boot sector located at the very beginning of a storage device, typically the first 512 bytes (1 sector). It plays a crucial role in the booting process of legacy BIOS systems. The MBR consists of three main components: the bootloader code (usually the first 446 bytes), the partition table (the next 64 bytes), and a boot signature (the last 2 bytes, typically 0x55AA). The bootloader contains the machine code that initiates the process of loading the operating system. The partition table holds information about ",(0,n.jsx)(t.strong,{children:"up to four primary partitions"}),", including their type, starting sector, and size."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(4041).A+"",width:"2214",height:"2000"})}),"\n",(0,n.jsx)(t.h3,{id:"partition-entries-in-mbr",children:"Partition entries in MBR"}),"\n",(0,n.jsx)(t.p,{children:"As you can see, an MBR partition entry is 16 bytes long and describes one partition on the disk. The partition table in the MBR contains space for up to four partition entries, located between byte 446 and 509 of the 512-byte MBR sector. In MBR, a partition entry is composed of metadata providing the necessary metadata to the system in order to continue the booting process."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(8648).A+"",width:"2188",height:"1250"})}),"\n",(0,n.jsxs)(t.p,{children:["The boot indicator gives the information on whether the partition is bootable (active) with the value 0x80 or not bootable (inactive) with the value 0x00. Note that only one partition should be marked as active. Multiple active partitions should trigger your interest as a digital forensic investigator.\nThe Starting and Ending ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Cylinder-head-sector",children:"CHS"})," Addresses are legacy special addresses used to locate the partition starting point. CHS stands for Cylinder-Head-Sector and is a legacy value divided into 3 bytes indicating the 3D coordinates and was used back in time when all disks were just a pile of cylinders with a head to read the data. It is very interesting to learn about CHS just to understand where all of those terms we are using are coming from."]}),"\n",(0,n.jsx)(t.p,{children:"Well, CHS is deprecated now, and the values you might find nowadays can be false because it\u2019s deprecated. Instead, we know rely on the Logical Byte Addressing (LBA) metric. LBA is not a coordinate system but simply a linear numbering system to specify the location of (sectors) on a storage. In MBR the Start LBA is referring to the address of the beginning of the partition in sectors. A value of 0x800 means that the sector number 0x800  of the disk is the start of the partition. With this information we can compute the physical address in the entire disk in bytes as:"}),"\n",(0,n.jsx)("p",{style:{textAlign:"center"},children:(0,n.jsx)("i",{children:"Absolute Address = LBA x SizeOfOneSector"})}),"\n",(0,n.jsx)(t.p,{children:"In our example, the absolute address of the beginning of our partition would be 0x800 * 0x200 = 0x100000.  But where does the partition ends? Well, instead of using the end CHS address that is deprecated, we use the sector count field which represent the number of sectors taken by the partition. We just have to multiply this value by the size of one sector, and we have the size in bytes of the partition."}),"\n",(0,n.jsx)("p",{style:{textAlign:"center"},children:(0,n.jsx)("i",{children:"PartitionSize = SectorsCount * SizeOfOneSector"})}),"\n",(0,n.jsxs)(t.p,{children:["Another very important field is the ",(0,n.jsx)(t.strong,{children:"partition type"}),' number. This number indicates the partition type or rather the "filesystem type". In MBR, each filesystem type is assigned to a unique value between (0x00 to 0xFF). Originally, in the 1980s and early 90s, the field had just a few defined values like 0x01 for FAT12, 0x04 for FAT16 As more operating systems and filesystems emerged (e.g., NTFS, Linux ext, swap, HPFS, etc.) new values were assigned which was still manageable. Eventually, third parties started overloading the values \u2014 meaning one type of code might refer to multiple possible formats. For example, the value 0x07 can be used for NTFS, HPFS, exFAT and QNX. Well this is a mess and in digital forensics we can use this field as an information but as this is not authoritative, we rely on partition identification validation using other methods that we will describe in the next blogpost of this series.']}),"\n",(0,n.jsxs)(t.p,{children:["Finally, the MBR signature field. It occupies the last 2 bytes of the 512-byte MBR sector with the constant value of ",(0,n.jsx)(t.strong,{children:"0x55AA"})," (in hex) (or AA 55 as it appears in little-endian order in a hex editor). Just overwriting this field will lead to an unbootable system using a legacy BIOS. Malware authors can target the MBR when writing Wipers. Malware like  ",(0,n.jsx)(t.a,{href:"https://www.recordedfuture.com/research/whispergate-malware-corrupts-computers-ukraine",children:"Whispergate"})," is a real-world example that is overriding the MBR bootloader section with a custom code to display a ransom note and override the first 199 bytes of each partition entry found."]}),"\n",(0,n.jsx)(t.h2,{id:"ebr-the-ugly-fix-for-the-partition-entries-limitation",children:"EBR: The \u201cugly\u201d fix for the partition entries limitation"}),"\n",(0,n.jsx)(t.p,{children:"If you followed everything until now, well first: congrats and thank you. Secondly, you noticed that the MBR is limiting the number of partition entries to 4. That is not enought nowadays as modern systems are using way more partition entries like dualboot systems, servers with multiple partitions to separate system functions, and more."}),"\n",(0,n.jsx)(t.p,{children:"To counteract this, IBM and Microsoft introduced the Extended Boot Record. EBR is a special partition table that is pointed by a standard MBR partition entry and is holding metadata for one logical partition at a time. It follows a scheme very similar to MBR (with the same signature) and holds only 2 partition entries:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The first one is describing a logical partition"}),"\n",(0,n.jsx)(t.li,{children:"The second one is describing the location of another EBR partition"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(6247).A+"",width:"3406",height:"2246"})}),"\n",(0,n.jsx)(t.p,{children:"With this method you can chain as many partition as you wish and \u201cextend\u201d the number of partitions you can fit into MBR. But this comes at the price of complexity and unused fields like the bootloader section of each EBR records. I haven\u2019t been digging into research, but I guess letting these empty unused bootloader sections could be used by malware to hide malicious code in there. Might be worth investigating this possibility."}),"\n",(0,n.jsxs)(t.p,{children:["The MBR\u2019s simplicity makes it widely supported, but also susceptible to tampering and limited in scalability compared to newer schemes like ",(0,n.jsx)(t.strong,{children:"GPT"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"guid-partition-table-gpt-the-modern-layout",children:"GUID Partition Table (GPT): The modern layout"}),"\n",(0,n.jsx)(t.p,{children:"The GUID Partition Table (GPT) is the modern partitioning scheme that replaces MBR, offering greater flexibility, scalability, and reliability. It was introduced as part of the UEFI (Unified Extensible Firmware Interface) standard, GPT supports disks larger than 2 terabytes and allows for an almost unlimited number of partitions (up to 128 by default, compared to MBR\u2019s limit of 4 primary partitions). Unlike MBR, we will use the LBA metric to describe the structure. As a reminder, 1 LBA = 1 Sector = 512 (0x200) bytes in our blog post series context."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(6710).A+"",width:"1944",height:"1823"})}),"\n",(0,n.jsx)(t.h3,{id:"protective-mbr",children:"Protective MBR"}),"\n",(0,n.jsx)(t.p,{children:"The Protective MBR (PMBR) is a compatibility trick used in the in GPT to protect GPT disks from being misinterpreted by older, MBR-only tools. That\u2019s why the GPT Header is located at LBA 1. The PMBR is non-bootable and has a partition type value of 0xEE with a start LBA address at 0x1 and a number of sectors equal to the entire disk (or 0xFFFFFFF if the disk is too large). Its whole purpose is to prevents MBR-only tools (like old versions of fdisk or BIOS utilities) from thinking the disk is unpartitioned and say \u201cThis is a GPT disk. Don\u2019t mess with it.\u201d It also gives us as a Digital Forensics Investigator the clue that we are dealing with GPT. We can also check the PMBR to see if it was corrupted or messed up with by a potential malware."}),"\n",(0,n.jsx)(t.h3,{id:"the-gpt-header",children:"The GPT Header"}),"\n",(0,n.jsx)(t.p,{children:"The GPT Header is a 512-byte structure (typically) that sits at LBA 1 (right after the Protective MBR at LBA 0). It describes:\n\u2022\tThe layout of the GPT partition table\n\u2022\tWhere to find partition entries\n\u2022\tHow many partition entries exist\n\u2022\tRedundant (backup) GPT structures"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(9669).A+"",width:"2272",height:"2758"})}),"\n",(0,n.jsx)(t.p,{children:"The GPT Header is very helpful in order for the Investigator to identify the partitions but if it was tampered with or corrupted, we can still rely on the fact that the backup information are still present at the end of the volume. We will see how we can do that with Exhume in a later section."}),"\n",(0,n.jsx)(t.h3,{id:"the-gpt-partition-entries",children:"The GPT Partition entries"}),"\n",(0,n.jsx)(t.p,{children:"Each partition entry in GPT includes a Globally Unique Identifier (GUID), a partition name, and CRC32 checksums for integrity verification that make GPT more robust and resistant to corruption than MBR. It also has attributes that can give us more specific information about the kind of filesystem and operating system we are dealing with."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(8388).A+"",width:"1992",height:"1292"})}),"\n",(0,n.jsx)(t.p,{children:"GPT is now the default partitioning method for Windows, Linux, and macOS on UEFI-enabled hardware. However you can and you will still find a lot of MBR."}),"\n",(0,n.jsx)(t.h2,{id:"exhume-partitions-disk-layout-investigation",children:"Exhume Partitions: Disk Layout Investigation"}),"\n",(0,n.jsx)(t.p,{children:'We integrated MBR/EBR and GPT partition investigation capabilities into the Exhume ToolKit inside the "exhume_partitions" module. Let\'s see how you can investigate a disk image layout using the CLI.'}),"\n",(0,n.jsxs)(t.p,{children:["After installing ",(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/docs/exhume_partitions/getting-started",children:"exhume partitions"}),", we can view the different options we can pass to the program using the ",(0,n.jsx)(t.code,{children:"--help"})," argument."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(2132).A+"",width:"3936",height:"1116"})}),"\n",(0,n.jsx)(t.p,{children:'Let\'s investigate a corrupted GPT Disk Image. In this case the main GPT Header at LBA 1 is no longer available. On the screenshot bellow, we can see the GPT Signature that is suppoed to be "EFI PART" in ASCII was modified to corrupt it.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(6029).A+"",width:"1260",height:"732"})}),"\n",(0,n.jsx)(t.p,{children:"Exhume as the capability to try to parse the backup GPT header and entries if the LBA 1 metadata are corrupted. Let's witness it by using exhume_partition on this disk image."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(1953).A+"",width:"7254",height:"3396"})}),"\n",(0,n.jsx)(t.p,{children:"We can see that the tool identified the PMBR, and didn't successfully parse the GPT signature. It as reverted to the backup Header thus making the parsing possible."}),"\n",(0,n.jsx)(t.h3,{id:"json-output",children:"JSON output"}),"\n",(0,n.jsxs)(t.p,{children:["Let's now say we want to use this output for our custom tool. We can use the ",(0,n.jsx)(t.code,{children:"--json"})," argument to have the results of the disk layout in JSON. In the example bellow, we pipe the resulted output into jq to fetch some interesting info."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:i(2008).A+"",width:"4749",height:"816"})}),"\n",(0,n.jsx)(t.h3,{id:"using-as-a-library",children:"Using as a library"}),"\n",(0,n.jsxs)(t.p,{children:["Like all Exhume modules, you can use it as a library in your own rust based tools ! Learn more with the documentation: ",(0,n.jsx)(t.a,{href:"https://www.forensicxlab.com/docs/exhume_partitions/library",children:"https://www.forensicxlab.com/docs/exhume_partitions/library"})]}),"\n",(0,n.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"We now have a new exhume module builded on top of Exhume Body to discover the layout of a disk image. In the next blogpost, we will dive into the forensic of the Extended FileSystem with Exhume ExtFS! We hope you enjoyed and learn things about MBR and GPT ! Join us on Discord if you want to participate to the project."})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},224:e=>{e.exports=JSON.parse('{"permalink":"/blog/thanatology-3","source":"@site/blog/2025-07-07-thanatology-3/index.md","title":"\ud83e\udd89 Thanatology part 3: MBR and GPT forensics with the Exhume ToolKit.","description":"This blogpost is part of the Thanatology blogpost series. If you haven\u2019t check it out, I recommend reading the following first:","date":"2025-07-07T00:00:00.000Z","tags":[{"inline":true,"label":"Thanatology","permalink":"/blog/tags/thanatology"},{"inline":true,"label":"Exhume","permalink":"/blog/tags/exhume"},{"inline":true,"label":"Digital Forensics","permalink":"/blog/tags/digital-forensics"}],"readingTime":10.595,"hasTruncateMarker":true,"authors":[{"name":"k1nd0ne","title":"Digital Forensics Spiderman","url":"https://github.com/k1n0ne","page":{"permalink":"/blog/authors/k-1-nd-0-ne"},"socials":{"x":"https://x.com/k1nd0ne","github":"https://github.com/k1nd0ne","bluesky":"https://bsky.app/profile/k1nd0ne.bsky.social"},"imageURL":"https://avatars.githubusercontent.com/u/27780432?v=4","key":"k1nd0ne"}],"frontMatter":{"slug":"thanatology-3","title":"\ud83e\udd89 Thanatology part 3: MBR and GPT forensics with the Exhume ToolKit.","authors":["k1nd0ne"],"tags":["Thanatology","Exhume","Digital Forensics"]},"unlisted":false,"prevItem":{"title":"\ud83d\udce6 VolWeb v3.15 July 2025 Release","permalink":"/blog/volweb-3-15"},"nextItem":{"title":"\ud83e\udd89 Thanatology part 2: Multiple disk images formats handling using the Exhume ToolKit","permalink":"/blog/thanatology-2"}}')},1953:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/10-129db9e01b8fade6433b984e011884ba.png"},2008:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/11-ee38e0453d6103221db1930dc4cc53e4.png"},2132:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/8-2cfed74f73eb4b0d4d5360eae41561f9.png"},4041:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/2-c2d11f075e2d5e51d238c43a4084cdd7.svg"},6029:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/9-126e70f54fe8c3c99bd3852b14c0bfec.png"},6247:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/4-ef49a87b2763d90ec2ba4d2be1cedc84.svg"},6710:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/5-e8e50d50624ee2091b04bf299c2ac447.svg"},8042:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/1-7ecbce5c156857ed6b6a473b3980db6f.svg"},8388:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/7-7fe9fb5a2e39f0dce1df3ee5773917d4.svg"},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>r});var s=i(6540);const n={},o=s.createContext(n);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},8648:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/3-eb916d7ba80e31db2fd75eec66fd6279.svg"},9669:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/6-b1be6347a5427c2d87589a24a60f03ad.svg"}}]);