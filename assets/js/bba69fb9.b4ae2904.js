"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[2040],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},9480:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"exhume_extfs/library","title":"Exhume ExtFS as a library","description":"This document provides guidance on how to use the exhume_extfs crate as a library in your Rust projects. You will learn how to integrate the library, its basic usage, and a sample minimalist main code example. Exhume ExtFS is also part of Exhume FileSystem.","source":"@site/docs/exhume_extfs/library.md","sourceDirName":"exhume_extfs","slug":"/exhume_extfs/library","permalink":"/docs/exhume_extfs/library","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/exhume_extfs/getting-started"},"next":{"title":"\ud83e\uddec Exhume - NTFS","permalink":"/docs/category/-exhume---ntfs"}}');var i=t(4848),a=t(8453);const r={sidebar_position:2},o="Exhume ExtFS as a library",l={},d=[{value:"Install",id:"install",level:2},{value:"\ud83d\udce6 Adding Exhume ExtFS as a Dependency",id:"-adding-exhume-extfs-as-a-dependency",level:2},{value:"\ud83d\udee0\ufe0f Basic Usage",id:"\ufe0f-basic-usage",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"exhume-extfs-as-a-library",children:"Exhume ExtFS as a library"})}),"\n",(0,i.jsxs)(n.p,{children:["This document provides guidance on how to use the ",(0,i.jsx)(n.code,{children:"exhume_extfs"})," crate as a library in your Rust projects. You will learn how to integrate the library, its basic usage, and a sample minimalist main code example. Exhume ExtFS is also part of ",(0,i.jsx)(n.a,{href:"https://www.forensicxlab.com/docs/category/exhume---filesystem",children:"Exhume FileSystem"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(n.p,{children:"Create a project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cargo new extfs_test\ncd extfs_test/src\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-adding-exhume-extfs-as-a-dependency",children:"\ud83d\udce6 Adding Exhume ExtFS as a Dependency"}),"\n",(0,i.jsxs)(n.p,{children:["To use the ",(0,i.jsx)(n.code,{children:"exhume_extfs"})," library in your Rust project, you need to add it as a dependency in your ",(0,i.jsx)(n.code,{children:"Cargo.toml"})," file. Below is the sections you need to include:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nexhume_body = "=0.1.1"\nexhume_extfs= "=0.1.1"\n\n# Required crates to log events\nlog = "0.4.25"\nenv_logger = "0.11.6"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-basic-usage",children:"\ud83d\udee0\ufe0f Basic Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Below is a sample code illustrating how to use ",(0,i.jsx)(n.code,{children:"exhume_extfs"})," as a library in the newly created Rust project. This example demonstrates initializing the library, and accessing inode number 2 metadata."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use exhume_body::{Body, BodySlice};\nuse exhume_extfs::ExtFS;\n\nfn main() {\n    // Connect our log env\n    env_logger::Builder::new().filter_level(log::LevelFilter::Info).init();\n    // We create an exhume body object to fetch our image.\n    let mut body = Body::new("/path/to/evidence.E01".to_string(), "auto");\n\n    // We discovered these values with exhume partitions\n    let offset= 0x100000;\n    let partition_size = 0x9c00000 * body.get_sector_size() as u64;\n\n    let mut slice = match BodySlice::new(&mut body, offset, partition_size) {\n        Ok(sl) => sl,\n        Err(e) => {\n            println!("Could not create BodySlice: {}", e);\n            return;\n        }\n    };\n\n    let mut filesystem = match ExtFS::new(&mut slice) {\n        Ok(fs) => fs,\n        Err(e) => {\n            println!("Couldn\'t open ExtFS: {}", e);\n            return;\n        }\n    };\n\n    let inode = match filesystem.get_inode(2) {\n        Ok(inode_val) => inode_val,\n        Err(e) => {\n            println!("Cannot read inode 2: {}", e);\n            return;\n        }\n    };\n\n    println!("{}", inode.to_string());\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);