"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[1498],{1014:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"exhume_filesystem/library","title":"Exhume FileSystem as a library","description":"Docs Version Dropdown","source":"@site/docs/exhume_filesystem/library.md","sourceDirName":"exhume_filesystem","slug":"/exhume_filesystem/library","permalink":"/docs/exhume_filesystem/library","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/exhume_filesystem/getting-started"},"next":{"title":"\ud83e\uddec Exhume - ExtFs","permalink":"/docs/category/-exhume---extfs"}}');var i=n(4848),r=n(8453);const l={sidebar_position:2},a="Exhume FileSystem as a library",o={},d=[{value:"Install",id:"install",level:2},{value:"\ud83d\udce6 Adding Exhume FileSystem as a Dependency",id:"-adding-exhume-filesystem-as-a-dependency",level:2},{value:"\ud83d\udee0\ufe0f Basic Usage",id:"\ufe0f-basic-usage",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"exhume-filesystem-as-a-library",children:"Exhume FileSystem as a library"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Docs Version Dropdown",src:n(3862).A+"",width:"802",height:"271"})}),"\n",(0,i.jsxs)(s.p,{children:["This document provides guidance on how to use the ",(0,i.jsx)(s.code,{children:"exhume_filesystem"})," crate as a library in your Rust projects. You will learn how to integrate the library, its basic usage, and a sample minimalist main code example."]}),"\n",(0,i.jsx)(s.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(s.p,{children:"Create a project:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"cargo new filesystem_test\ncd filesystem_test/src\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-adding-exhume-filesystem-as-a-dependency",children:"\ud83d\udce6 Adding Exhume FileSystem as a Dependency"}),"\n",(0,i.jsxs)(s.p,{children:["To use the ",(0,i.jsx)(s.code,{children:"exhume_filesystem"})," library in your Rust project, you need to add it as a dependency in your ",(0,i.jsx)(s.code,{children:"Cargo.toml"})," file. Below is the sections you need to include:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-toml",children:'[dependencies]\nexhume_body = "=0.2.0"\nexhume_filesystem = "=0.2.0"\n\n# Required crates to log events\nlog = "0.4.25"\nenv_logger = "0.11.6"\n'})}),"\n",(0,i.jsx)(s.h2,{id:"\ufe0f-basic-usage",children:"\ud83d\udee0\ufe0f Basic Usage"}),"\n",(0,i.jsxs)(s.p,{children:["Below is a sample code illustrating how to use ",(0,i.jsx)(s.code,{children:"exhume_filesystem"})," as a library in a Rust project. This example demonstrates initializing the library, scanning for file records, and accessing file metadata."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-rust",children:'use exhume_body::Body;\nuse exhume_filesystem::Filesystem;\nuse exhume_filesystem::detected_fs::detect_filesystem;\n\n\nfn main() {\n    // Connect our log env\n    env_logger::Builder::new().filter_level(log::LevelFilter::Info).init();\n    // We create an exhume body object to fetch our image.\n    let body = Body::new("/path/to/evidence.E01".to_string(), "auto");\n\n    // We discovered these values with exhume partitions (see the documentation)\n    let offset= 0x100000;\n    let partition_size = 0x9c00000 * body.get_sector_size() as u64;\n\n    let mut filesystem = match detect_filesystem(&body, offset, partition_size) {\n        Ok(fs) => fs,\n        Err(err) => {\n            println!("Could not detect the provided filesystem: {:?}", err);\n            return;\n        }\n    };\n\n    let file = match filesystem.get_file(2) {\n        Ok(file) => file,\n        Err(err) => {\n                println!("Could not fetch the requested file: {:?}", err);\n                return;\n        }\n    };\n\n    println!("{}", file.to_string());\n}\n'})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3862:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/exhume_filesystem_archi-95a07459c9355f19d616305f3415fa56.svg"},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(6540);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);