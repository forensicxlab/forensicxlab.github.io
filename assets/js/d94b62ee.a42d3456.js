"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[6894],{8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function d(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),a.createElement(o.Provider,{value:n},e.children)}},9642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"exhume_body/library","title":"Exhume Body as a library","description":"This page shows how to embed the exhume_body crate in your own Rust codebase. You\u2019ll see how to add the dependency, initialise the library, and read data from an evidence file with just a few lines of code.","source":"@site/docs/exhume_body/library.md","sourceDirName":"exhume_body","slug":"/exhume_body/library","permalink":"/docs/exhume_body/library","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/exhume_body/getting-started"},"next":{"title":"Judicial Forensics Documentation (Experimental)","permalink":"/docs/exhume_body/judicial"}}');var i=t(4848),o=t(8453);const d={sidebar_position:2},r="Exhume Body as a library",s={},l=[{value:"\ud83d\udce6 Install",id:"-install",level:2},{value:"\ud83d\udee0\ufe0f Adding Exhume Body as a Dependency",id:"\ufe0f-adding-exhume-body-as-a-dependency",level:2},{value:"\ud83c\udfc3\u200d\u2640\ufe0f Minimal Example",id:"\ufe0f-minimal-example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"exhume-body-as-a-library",children:"Exhume Body as a library"})}),"\n",(0,i.jsxs)(n.p,{children:["This page shows how to embed the ",(0,i.jsx)(n.code,{children:"exhume_body"})," crate in your own Rust codebase. You\u2019ll see how to add the dependency, initialise the library, and read data from an evidence file with just a few lines of code.\nExhume Body is part of the wider ",(0,i.jsx)(n.a,{href:"https://www.forensicxlab.com/docs/category/exhume---filesystem",children:"Exhume FileSystem"})," toolkit."]}),"\n",(0,i.jsx)(n.h2,{id:"-install",children:"\ud83d\udce6 Install"}),"\n",(0,i.jsx)(n.p,{children:"Create a fresh project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cargo new body_test\ncd body_test\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-adding-exhume-body-as-a-dependency",children:"\ud83d\udee0\ufe0f Adding Exhume Body as a Dependency"}),"\n",(0,i.jsx)(n.p,{children:"Update your Cargo.toml:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nexhume_body = "=0.3.1"\n\n# Optional (but recommended) logging crates\nlog         = "0.4.25"\nenv_logger  = "0.11.6"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-minimal-example",children:"\ud83c\udfc3\u200d\u2640\ufe0f Minimal Example"}),"\n",(0,i.jsx)(n.p,{children:"The snippet below opens an evidence file, prints a quick header, then reads the first 1 KiB of data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Rust",children:'use exhume_body::Body;\nuse std::io::{Read, Seek, SeekFrom};\n\nfn main() {\n    // Enable log output (optional)\n    env_logger::Builder::new()\n        .filter_level(log::LevelFilter::Info)\n        .init();\n\n    // Open the evidence file \u2014 let Exhume auto-detect the container type\n    let mut body = Body::new("/path/to/evidence.E01".to_string(), "auto");\n\n    // Dump some high-level metadata to the log\n    body.print_info();\n\n    // Seek to byte offset 0x200\n    body.seek(SeekFrom::Start(0x200)).expect("seek failed");\n\n    // Read the next 0x400 bytes (1 KiB)\n    let mut buffer = vec![0u8; 0x400];\n    body.read_exact(&mut buffer).expect("read failed");\n\n    println!("Read {} bytes; first 16 bytes: {:02x?}", buffer.len(), &buffer[..16]);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"That\u2019s it! You now have a lightweight way to peek, carve, or stream data from forensic images directly inside your Rust applications."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);