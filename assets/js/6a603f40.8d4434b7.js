"use strict";(self.webpackChunkexhume=self.webpackChunkexhume||[]).push([[6957],{4596:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"exhume_ntfs/library","title":"Exhume NTFS as a library","description":"This document provides guidance on how to use the exhume_ntfs crate as a library in your Rust projects. You will learn how to integrate the library, its basic usage, and a sample minimalist main code example. Exhume NTFS is also part of Exhume FileSystem.","source":"@site/docs/exhume_ntfs/library.md","sourceDirName":"exhume_ntfs","slug":"/exhume_ntfs/library","permalink":"/docs/exhume_ntfs/library","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/exhume_ntfs/getting-started"},"next":{"title":"\ud83e\uddec Exhume - LVM","permalink":"/docs/category/-exhume---lvm"}}');var i=t(4848),a=t(8453);const r={sidebar_position:2},o="Exhume NTFS as a library",l={},d=[{value:"Install",id:"install",level:2},{value:"\ud83d\udce6 Adding Exhume NTFS as a Dependency",id:"-adding-exhume-ntfs-as-a-dependency",level:2},{value:"\ud83d\udee0\ufe0f Basic Usage",id:"\ufe0f-basic-usage",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"exhume-ntfs-as-a-library",children:"Exhume NTFS as a library"})}),"\n",(0,i.jsxs)(n.p,{children:["This document provides guidance on how to use the ",(0,i.jsx)(n.code,{children:"exhume_ntfs"})," crate as a library in your Rust projects. You will learn how to integrate the library, its basic usage, and a sample minimalist main code example. Exhume NTFS is also part of ",(0,i.jsx)(n.a,{href:"https://www.forensicxlab.com/docs/category/exhume---filesystem",children:"Exhume FileSystem"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(n.p,{children:"Create a project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cargo new ntfs_test\ncd ntfs_test/src\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-adding-exhume-ntfs-as-a-dependency",children:"\ud83d\udce6 Adding Exhume NTFS as a Dependency"}),"\n",(0,i.jsxs)(n.p,{children:["To use the ",(0,i.jsx)(n.code,{children:"exhume_ntfs"})," library in your Rust project, you need to add it as a dependency in your ",(0,i.jsx)(n.code,{children:"Cargo.toml"})," file. Below is the sections you need to include:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nexhume_body = "=0.3.1"\nexhume_ntfs= "=0.1.3"\n\n# Required crates to log events\nlog = "0.4.25"\nenv_logger = "0.11.6"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-basic-usage",children:"\ud83d\udee0\ufe0f Basic Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Below is a sample code illustrating how to use ",(0,i.jsx)(n.code,{children:"exhume_ntfs"})," as a library in a Rust project. This example demonstrates initializing the library, accessing file identifier number 5 metadata and print the associated metadata."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use exhume_body::{Body, BodySlice};\nuse exhume_ntfs::NTFS;\n\nfn main() {\n    // Connect our log env\n    env_logger::Builder::new()\n        .filter_level(log::LevelFilter::Info)\n        .init();\n    // We create an exhume body object to fetch our image.\n    let body = Body::new(\n        "/samples/logical_acquired/4orensics.001".to_string(),\n        "auto",\n    );\n\n    // This is a logically acquired image of the NTFS partition. It starts at offset 0 and have the size of the file.\n    let offset = 0x0;\n    let partition_size = 0x629FFFE00 * body.get_sector_size() as u64;\n\n    let mut slice = match BodySlice::new(&body, offset, partition_size) {\n        Ok(sl) => sl,\n        Err(e) => {\n            println!("Could not create BodySlice: {}", e);\n            return;\n        }\n    };\n\n    let mut filesystem = match NTFS::new(&mut slice) {\n        Ok(fs) => fs,\n        Err(e) => {\n            println!("Couldn\'t open NTFS: {}", e);\n            return;\n        }\n    };\n\n    let file_id = match filesystem.get_file_id(5) {\n        Ok(file_val) => file_val,\n        Err(e) => {\n            println!("Cannot read inode 5: {}", e);\n            return;\n        }\n    };\n\n    println!("{}", file_id.to_string());\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);