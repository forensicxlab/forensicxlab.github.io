<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Volatility on ForensicXlab</title>
    <link>http://www.example.com/tags/volatility/</link>
    <description>Recent content in Volatility on ForensicXlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 May 2022 16:42:40 +0200</lastBuildDate><atom:link href="http://www.example.com/tags/volatility/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ðŸ“˜ Using Volatility3 as a library</title>
      <link>http://www.example.com/posts/vol_as_lib/</link>
      <pubDate>Mon, 30 May 2022 16:42:40 +0200</pubDate>
      
      <guid>http://www.example.com/posts/vol_as_lib/</guid>
      <description>Abstract Link to heading Being interested in memory forensic for a while now, I have learned a lot about the volatility3 framework. In this article, we will go through how you can use the framework&amp;rsquo;s libraries to automate your memory analysis tasks and directly exploit the results. I will assume in this article that the reader has a basic understanding of how volatility3 is exploiting memory to extract evidence. If you want to learn more about volatility3, you can check the links in the &amp;ldquo;References&amp;rdquo; section.</description>
    </item>
    
  </channel>
</rss>
